# Part1
puzzle_input = [3,225,1,225,6,6,1100,1,238,225,104,0,1102,89,49,225,1102,35,88,224,101,-3080,224,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,1101,25,33,224,1001,224,-58,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1102,78,23,225,1,165,169,224,101,-80,224,224,4,224,102,8,223,223,101,7,224,224,1,224,223,223,101,55,173,224,1001,224,-65,224,4,224,1002,223,8,223,1001,224,1,224,1,223,224,223,2,161,14,224,101,-3528,224,224,4,224,1002,223,8,223,1001,224,7,224,1,224,223,223,1002,61,54,224,1001,224,-4212,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1101,14,71,225,1101,85,17,225,1102,72,50,225,1102,9,69,225,1102,71,53,225,1101,10,27,225,1001,158,34,224,101,-51,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,102,9,154,224,101,-639,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,226,226,224,102,2,223,223,1006,224,329,101,1,223,223,1007,677,677,224,1002,223,2,223,1005,224,344,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,359,1001,223,1,223,108,226,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,107,226,677,224,102,2,223,223,1006,224,389,101,1,223,223,1107,226,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,419,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,434,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,464,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,479,101,1,223,223,1008,226,677,224,1002,223,2,223,1006,224,494,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,509,1001,223,1,223,1108,226,226,224,1002,223,2,223,1006,224,524,101,1,223,223,7,226,226,224,102,2,223,223,1006,224,539,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,569,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,584,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,614,101,1,223,223,108,677,677,224,102,2,223,223,1005,224,629,1001,223,1,223,8,677,677,224,1002,223,2,223,1005,224,644,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,659,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226]

def one(program, store_position, num1, num2):
    program[store_position] = num1 + num2


def two(program,  store_position, num1, num2):
    program[store_position] = num1 * num2

def three(program, store_position):
    program[store_position] = int(input())

def four(program, store_position):
    print(program[store_position])

def getStep(opcode):
    step = 4
    if opcode > 2:
        step = 2
    return step

def run_intcode(program):
    switcher = {
        1: one,
        2: two,
        3: three,
        4: four
    }
    step = 4
    i=0
    #print(f"Longitud del programa {len(program)}")
    while i < len(program):
    #for i in range(0, len(program), step):
        instruction = f"{program[i]:0>5}"
        mode_p3 = int(instruction[0])
        mode_p2 = int(instruction[1])
        mode_p1 = int(instruction[2])
        opcode = int(instruction[3:])

        step = getStep(opcode)


        if opcode == 99:
            break

        #print(f"index: {i} | step: {step} | opcode: {opcode}")
        func = switcher.get(opcode, lambda: "unknown code")
        if opcode in [1,2]:
            #if mode_p3:
            store_position = program[i+3]
            # else:
            #     store_position = program[program[i+3]]
            if mode_p2:
                num2 = program[i+2]
            else:
                num2 = program[program[i+2]]
            if mode_p1:
                num1 = program[i+1]
            else:
                num1 = program[program[i+1]]
            if len(program) < store_position+1:
                for x in range(len(program), store_position+1):
                    program.append(0)
            func(program, store_position, num1, num2)
        else:
            #if mode_p1:
            store_position = program[i+1]
            if opcode==4 and mode_p1:
                store_position = i+1
            #else:
            #    store_position = program[program[i+1]]
            func(program, store_position)
        i += step

run_intcode(puzzle_input)
